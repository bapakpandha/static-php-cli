name: CI on x86_64 Windows

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: php version to compile
        default: '8.4'
        type: choice
        options:
          - '8.4'
          - '8.3'
          - '8.2'
          - '8.1'
          - '8.0'
      build-cli:
        description: build cli binary
        default: true
        type: boolean
      build-micro:
        description: build phpmicro binary
        type: boolean
      extensions:
        description: extensions to compile (comma separated)
        required: true
        default: "amqp,apcu,ast,bcmath,brotli,bz2,calendar,ctype,curl,dba,dio,dom,ds,ev,exif,ffi,fileinfo,filter,ftp,gd,gmssl,iconv,igbinary,intl,libxml,mbregex,mbstring,msgpack,mysqli,mysqlnd,odbc,opcache,openssl,opentelemetry,parallel,pdo,pdo_mysql,pdo_odbc,pdo_pgsql,pdo_sqlite,pdo_sqlsrv,pgsql,phar,rar,redis,session,shmop,simdjson,simplexml,soap,sockets,sodium,sqlite3,sqlsrv,ssh2,swow,sysvshm,tokenizer,xlswriter,xml,xmlreader,xmlwriter,xz,yac,yaml,zip,zlib"
        type: string
      libraries:
        description: libraries to include (comma separated)
        required: false
        default: "freetype,libwebp,libavif,zstd,libjpeg,qdbm"
        type: string
      prefer-pre-built:
        description: prefer pre-built binaries (reduce build time)
        type: boolean
        default: true
      debug:
        description: enable debug logs
        type: boolean
      enable-zts:
        description: enable ZTS build
        type: boolean
        default: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    name: build ${{ inputs.version }} on Windows x86_64
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      # Cache composer dependencies
      - id: cache-composer-deps
        uses: actions/cache@v4
        with:
          path: vendor
          key: composer-dependencies

      - if: steps.cache-composer-deps.outputs.cache-hit != 'true'
        run: composer update --no-dev --classmap-authoritative

      # Generate hashed key for download cache
      - shell: bash
        run: |
          INPUT_HASH=$(echo "${{ runner.os }}-${{ inputs.version }}-${{ inputs.extensions }}-${{ inputs.libraries }}" | sha256sum | awk '{print $1}')
          echo "INPUT_HASH=${INPUT_HASH}" >> "$GITHUB_ENV"

      # Cache downloaded sources
      - id: cache-download
        uses: actions/cache@v4
        with:
          path: downloads
          key: php-${{ env.INPUT_HASH }}

      # Set environment variables for build flags
      - if: inputs.debug == true
        run: echo "SPC_BUILD_DEBUG=--debug" >> $env:GITHUB_ENV
      - if: inputs.prefer-pre-built == true
        run: echo "SPC_PRE_BUILT=--prefer-pre-built" >> $env:GITHUB_ENV
      - if: inputs.build-cli == true
        run: echo "SPC_BUILD_CLI=--build-cli" >> $env:GITHUB_ENV
      - if: inputs.build-micro == true
        run: echo "SPC_BUILD_MICRO=--build-micro" >> $env:GITHUB_ENV
      - if: inputs.enable-zts == true
        run: echo "SPC_ENABLE_ZTS=--enable-zts" >> $env:GITHUB_ENV

      - run: ./bin/spc doctor

      # Download sources if not cached
      - if: steps.cache-download.outputs.cache-hit != 'true'
        run: ./bin/spc download --with-php="${{ inputs.version }}" --for-extensions="${{ inputs.extensions }}" ${{ env.SPC_BUILD_DEBUG }} ${{ env.SPC_PRE_BUILT }}

      # Run build command
      - run: ./bin/spc build "${{ inputs.extensions }}" \
          --with-libs="${{ inputs.libraries }}" \
          ${{ env.SPC_BUILD_DEBUG }} \
          ${{ env.SPC_BUILD_CLI }} \
          ${{ env.SPC_BUILD_MICRO }} \
          ${{ env.SPC_ENABLE_ZTS }}

      # Upload CLI executable
      - if: ${{ inputs.build-cli == true }}
        uses: actions/upload-artifact@v4
        with:
          name: php-${{ inputs.version }}
          path: buildroot/bin/php.exe

      # Upload micro executable
      - if: ${{ inputs.build-micro == true }}
        uses: actions/upload-artifact@v4
        with:
          name: micro-${{ inputs.version }}
          path: buildroot/bin/micro.sfx

      # Upload extensions metadata
      - uses: actions/upload-artifact@v4
        with:
          name: license-files
          path: buildroot/license/
      - uses: actions/upload-artifact@v4
        with:
          name: build-meta
          path: |
            buildroot/build-extensions.json
            buildroot/build-libraries.json
